import pandas as pd
import mysql.connector
import numpy as np
from datetime import datetime

def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="Dhruv001@",
        database="cybersecurity_db"
    )

def create_incident_report(cursor, malware_id, severity, url, malware_type):
    """Create an incident report for high-severity malware"""
    if severity >= 7:  # Create incident reports for high severity cases
        insert_query = """
        INSERT INTO incident_reports (malware_id, status, notes, detected_url, malware_type)
        VALUES (%s, %s, %s, %s, %s)
        """
        notes = f"High severity malware detected (Level: {severity}). Requires immediate attention."
        cursor.execute(insert_query, (malware_id, 'NEW', notes, url, malware_type))

def import_malware_data():
    # Read the CSV file
    df = pd.read_csv('malicious_phish.csv')
    
    # Take first 15000 rows
    df = df.head(15000)
    
    # Truncate URLs to fit in VARCHAR(255)
    df['url'] = df['url'].str.slice(0, 255)
    
    # Generate random severity scores between 1 and 10
    np.random.seed(42)  # for reproducibility
    df['severity'] = np.random.randint(1, 11, size=len(df))
    
    # Map type to severity ranges
    def adjust_severity(row):
        if row['type'] == 'phishing':
            return max(7, row['severity'])  # phishing sites get severity >= 7
        elif row['type'] == 'malware':
            return max(8, row['severity'])  # malware sites get severity >= 8
        elif row['type'] == 'defacement':
            return min(max(4, row['severity']), 7)  # defacement sites get severity between 4-7
        else:
            return min(3, row['severity'])  # benign sites get severity <= 3
    
    df['severity'] = df.apply(adjust_severity, axis=1)
    
    # Connect to database
    conn = connect_db()
    cursor = conn.cursor()
    
    # Insert data
    insert_query = """
    INSERT INTO malware_repository (name, severity, description)
    VALUES (%s, %s, %s)
    """
    
    # Process each row
    success_count = 0
    error_count = 0
    incident_count = 0
    
    for _, row in df.iterrows():
        try:
            # Insert into malware_repository
            cursor.execute(insert_query, (
                str(row['url']),  # Convert to string
                int(row['severity']),  # Convert to integer
                str(row['type'])  # Convert to string
            ))
            
            # Get the last inserted malware_id
            malware_id = cursor.lastrowid
            
            # Create incident report for high-severity cases
            if row['severity'] >= 7:
                create_incident_report(cursor, malware_id, row['severity'], row['url'], row['type'])
                incident_count += 1
            
            success_count += 1
            
        except mysql.connector.Error as err:
            print(f"Error inserting row {row['url']}: {err}")
            error_count += 1
            continue
    
    # Commit the changes
    conn.commit()
    
    print(f"""
    Import completed:
    - Successfully imported: {success_count} records
    - Failed to import: {error_count} records
    - Incident reports created: {incident_count}
    """)
    
    # Close connections
    cursor.close()
    conn.close()

def check_existing_data():
    """Check if tables already have data"""
    conn = connect_db()
    cursor = conn.cursor()
    
    tables = ['malware_repository', 'incident_reports', 'threat_analysis_submissions']
    results = {}
    
    for table in tables:
        cursor.execute(f"SELECT COUNT(*) FROM {table}")
        count = cursor.fetchone()[0]
        results[table] = count
    
    cursor.close()
    conn.close()
    return results

if __name__ == "__main__":
    try:
        # Check existing data
        existing_data = check_existing_data()
        print("Current table status:")
        for table, count in existing_data.items():
            print(f"- {table}: {count} records")
        
        proceed = input("\nDo you want to proceed with import? (y/n): ")
        if proceed.lower() == 'y':
            import_malware_data()
        else:
            print("Import cancelled.")
    except Exception as e:
        print(f"An error occurred: {e}") 